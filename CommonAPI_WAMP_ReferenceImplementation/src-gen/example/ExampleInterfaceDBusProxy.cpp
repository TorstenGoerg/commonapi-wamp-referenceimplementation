/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <example/ExampleInterfaceDBusProxy.hpp>

namespace example {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createExampleInterfaceDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<ExampleInterfaceDBusProxy>(_address, _connection);
}

INITIALIZER(registerExampleInterfaceDBusProxy) {
	CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		ExampleInterface::getInterface(),
		&createExampleInterfaceDBusProxy);
}

ExampleInterfaceDBusProxy::ExampleInterfaceDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
{
}



        void ExampleInterfaceDBusProxy::play(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
            CommonAPI::DBus::DBusProxyHelper<
                CommonAPI::DBus::DBusSerializableArguments<
                >,
                CommonAPI::DBus::DBusSerializableArguments<
                >
            >::callMethodWithReply(
            *this,
            "play",
            "",
            (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
            _internalCallStatus);
        }
        std::future<CommonAPI::CallStatus> ExampleInterfaceDBusProxy::playAsync(PlayAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
            return CommonAPI::DBus::DBusProxyHelper<
                CommonAPI::DBus::DBusSerializableArguments<
                >,
                CommonAPI::DBus::DBusSerializableArguments<
                >
            >::callMethodAsync(
            *this,
            "play",
            "",
            (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
            [_callback] (CommonAPI::CallStatus _status) {
            	_callback(_status);
            },
            std::make_tuple());
        }
        void ExampleInterfaceDBusProxy::add2(const int64_t &_left, const int64_t &_right, CommonAPI::CallStatus &_internalCallStatus, int64_t &_sum, int64_t &_diff, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> deploy_left(_left, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> deploy_right(_right, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> deploy_sum(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> deploy_diff(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::DBus::DBusProxyHelper<
                CommonAPI::DBus::DBusSerializableArguments<
                CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment >,
                CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment >
                >,
                CommonAPI::DBus::DBusSerializableArguments<
                    CommonAPI::Deployable<int64_t,CommonAPI::EmptyDeployment>,
                    CommonAPI::Deployable<int64_t,CommonAPI::EmptyDeployment>
                >
            >::callMethodWithReply(
            *this,
            "add2",
            "xx",
            (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
            deploy_left, deploy_right,
            _internalCallStatus,
            deploy_sum, deploy_diff);
            _sum = deploy_sum.getValue();
            _diff = deploy_diff.getValue();
        }
        std::future<CommonAPI::CallStatus> ExampleInterfaceDBusProxy::add2Async(const int64_t &_left, const int64_t &_right, Add2AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> deploy_left(_left, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> deploy_right(_right, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> deploy_sum(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> deploy_diff(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            return CommonAPI::DBus::DBusProxyHelper<
                CommonAPI::DBus::DBusSerializableArguments<
                CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment >,
                CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment >
                >,
                CommonAPI::DBus::DBusSerializableArguments<
                    CommonAPI::Deployable<int64_t,CommonAPI::EmptyDeployment>,
                    CommonAPI::Deployable<int64_t,CommonAPI::EmptyDeployment>
                >
            >::callMethodAsync(
            *this,
            "add2",
            "xx",
            (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
            deploy_left, deploy_right,
            [_callback] (CommonAPI::CallStatus _status, CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> _sum, CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> _diff) {
            	_callback(_status, _sum.getValue(), _diff.getValue());
            },
            std::make_tuple(deploy_sum, deploy_diff));
        }


        void ExampleInterfaceDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
            ownVersionMajor = 0;
            ownVersionMinor = 0;
        }

        } // namespace example
