/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <example/ExampleInterface.hpp>
#include <example/ExampleInterfaceDBusStubAdapter.hpp>

namespace example {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createExampleInterfaceDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<ExampleInterfaceDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerExampleInterfaceDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	ExampleInterface::getInterface(), &createExampleInterfaceDBusStubAdapter);
}

ExampleInterfaceDBusStubAdapterInternal::~ExampleInterfaceDBusStubAdapterInternal() {
    deactivateManagedInstances();
    ExampleInterfaceDBusStubAdapterHelper::deinit();
}

void ExampleInterfaceDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* ExampleInterfaceDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"play\">\n"
        "</method>\n"
        "<method name=\"add2\">\n"
            "<arg name=\"_left\" type=\"x\" direction=\"in\" />\n"
            "<arg name=\"_right\" type=\"x\" direction=\"in\" />\n"
            "<arg name=\"_sum\" type=\"x\" direction=\"out\" />\n"
            "<arg name=\"_diff\" type=\"x\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::example::ExampleInterfaceStub,
        CommonAPI::Version
        > ExampleInterfaceDBusStubAdapterInternal::getExampleInterfaceInterfaceVersionStubDispatcher(&ExampleInterfaceStub::getInterfaceVersion, "uu");




CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::example::ExampleInterfaceStub,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>
    
    > ExampleInterfaceDBusStubAdapterInternal::playStubDispatcher(
    &ExampleInterfaceStub::play, "",
					std::make_tuple(),
                	std::make_tuple());

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::example::ExampleInterfaceStub,
    std::tuple<int64_t, int64_t>,
    std::tuple<int64_t, int64_t>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > ExampleInterfaceDBusStubAdapterInternal::add2StubDispatcher(
    &ExampleInterfaceStub::add2, "xx",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));





const ExampleInterfaceDBusStubAdapterHelper::StubDispatcherTable& ExampleInterfaceDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& ExampleInterfaceDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

ExampleInterfaceDBusStubAdapterInternal::ExampleInterfaceDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      ExampleInterfaceDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<ExampleInterfaceStub>(_stub), false),
      stubDispatcherTable_({
            { { "play", "" }, &example::ExampleInterfaceDBusStubAdapterInternal::playStubDispatcher },
            { { "add2", "xx" }, &example::ExampleInterfaceDBusStubAdapterInternal::add2StubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &example::ExampleInterfaceDBusStubAdapterInternal::getExampleInterfaceInterfaceVersionStubDispatcher });
}

const bool ExampleInterfaceDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace example
