/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef EXAMPLE_Example_Interface_PROXY_BASE_HPP_
#define EXAMPLE_Example_Interface_PROXY_BASE_HPP_

#include <example/ExampleInterface.hpp>



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace example {

class ExampleInterfaceProxyBase
    : virtual public CommonAPI::Proxy {
public:

    typedef std::function<void(const CommonAPI::CallStatus&)> PlayAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int64_t&, const int64_t&)> Add2AsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ExampleInterface::SumDiff&)> Add2structAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ExampleInterface::SumDiff&)> Add2nestedStructAsyncCallback;



    virtual void play(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> playAsync(PlayAsyncCallback _callback, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void add2(const int64_t &_left, const int64_t &_right, CommonAPI::CallStatus &_internalCallStatus, int64_t &_sum, int64_t &_diff, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> add2Async(const int64_t &_left, const int64_t &_right, Add2AsyncCallback _callback, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void add2struct(const ExampleInterface::Summands &_s, CommonAPI::CallStatus &_internalCallStatus, ExampleInterface::SumDiff &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> add2structAsync(const ExampleInterface::Summands &_s, Add2structAsyncCallback _callback, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void add2nestedStruct(const ExampleInterface::Params &_p, CommonAPI::CallStatus &_internalCallStatus, ExampleInterface::SumDiff &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> add2nestedStructAsync(const ExampleInterface::Params &_p, Add2nestedStructAsyncCallback _callback, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace example

#endif // EXAMPLE_Example_Interface_PROXY_BASE_HPP_
