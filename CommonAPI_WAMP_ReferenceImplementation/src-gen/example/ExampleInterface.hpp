/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef EXAMPLE_EXAMPLE_INTERFACE_HPP_
#define EXAMPLE_EXAMPLE_INTERFACE_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace example {

class ExampleInterface {
public:
    virtual ~ExampleInterface() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    struct Summands : CommonAPI::Struct<uint64_t, uint64_t> {
    	
    	Summands() {
    	}
    	Summands(const uint64_t &_left, const uint64_t &_right)
    	{
    		std::get<0>(values_) = _left;
    		std::get<1>(values_) = _right;
    	}
    	inline const uint64_t &getLeft() const { return std::get<0>(values_); }
    	inline void setLeft(const uint64_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint64_t &getRight() const { return std::get<1>(values_); }
    	inline void setRight(const uint64_t &_value) { std::get<1>(values_) = _value; }
    	bool operator==(const Summands &_other) const;
    	inline bool operator!=(const Summands &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct Params : CommonAPI::Struct<Summands, uint64_t> {
    	
    	Params() {
    	}
    	Params(const Summands &_ss, const uint64_t &_x)
    	{
    		std::get<0>(values_) = _ss;
    		std::get<1>(values_) = _x;
    	}
    	inline const Summands &getSs() const { return std::get<0>(values_); }
    	inline void setSs(const Summands &_value) { std::get<0>(values_) = _value; }
    	inline const uint64_t &getX() const { return std::get<1>(values_); }
    	inline void setX(const uint64_t &_value) { std::get<1>(values_) = _value; }
    	bool operator==(const Params &_other) const;
    	inline bool operator!=(const Params &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct SumDiff : CommonAPI::Struct<uint64_t, uint64_t> {
    	
    	SumDiff() {
    	}
    	SumDiff(const uint64_t &_sum, const uint64_t &_diff)
    	{
    		std::get<0>(values_) = _sum;
    		std::get<1>(values_) = _diff;
    	}
    	inline const uint64_t &getSum() const { return std::get<0>(values_); }
    	inline void setSum(const uint64_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint64_t &getDiff() const { return std::get<1>(values_); }
    	inline void setDiff(const uint64_t &_value) { std::get<1>(values_) = _value; }
    	bool operator==(const SumDiff &_other) const;
    	inline bool operator!=(const SumDiff &_other) const {
    		return !((*this) == _other);
    	}
    
    };
};

const char* ExampleInterface::getInterface() {
    return ("example.ExampleInterface");
}

CommonAPI::Version ExampleInterface::getInterfaceVersion() {
    return CommonAPI::Version(0, 0);
}


} // namespace example

namespace CommonAPI {
}

#endif // EXAMPLE_EXAMPLE_INTERFACE_HPP_
