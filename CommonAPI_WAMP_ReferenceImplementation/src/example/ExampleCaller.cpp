
#include <example/generated/ExampleInterfaceWampStructsSupport.hpp>

#include <autobahn/autobahn.hpp>
#include <boost/asio.hpp>
#include <boost/version.hpp>
#include <chrono>
#include <iostream>
#include <memory>
#include <string>
#include <tuple>

using namespace example;


/*
struct Summands
{
    uint64_t left;
    uint64_t right;

    MSGPACK_DEFINE(left, right)
};

struct SumDiff
{
    uint64_t sum;
    uint64_t diff;

    MSGPACK_DEFINE(sum, diff)
};
*/


static const bool debug = false;
static const std::string realm = "realm1";
static const boost::asio::ip::tcp::endpoint rawsocketEndpoint(boost::asio::ip::address::from_string("127.0.0.1"), 8000);
static const uint32_t clientNumber = 1;

int main(int argc, char** argv)
{
    std::cerr << "Boost: " << BOOST_VERSION << std::endl;

    try {
        boost::asio::io_service io;
        auto transport = std::make_shared<autobahn::wamp_tcp_transport>(io, rawsocketEndpoint, debug);

        auto session = std::make_shared<autobahn::wamp_session>(io, debug);

        transport->attach(std::static_pointer_cast<autobahn::wamp_transport_handler>(session));

        // Make sure the continuation futures we use do not run out of scope prematurely.
        // Since we are only using one thread here this can cause the io service to block
        // as a future generated by a continuation will block waiting for its promise to be
        // fulfilled when it goes out of scope. This would prevent the session from receiving
        // responses from the router.
        boost::future<void> connect_future;
        boost::future<void> start_future;
        boost::future<void> join_future;
        boost::future<void> leave_future;
        boost::future<void> stop_future;

        connect_future = transport->connect().then([&](boost::future<void> connected) {
            try {
                connected.get();
            } catch (const std::exception& e) {
                std::cerr << e.what() << std::endl;
                io.stop();
                return;
            }
            std::cerr << "transport connected" << std::endl;

            start_future = session->start().then([&](boost::future<void> started) {
                try {
                    started.get();
                } catch (const std::exception& e) {
                    std::cerr << e.what() << std::endl;
                    io.stop();
                    return;
                }

                std::cerr << "session started" << std::endl;

                join_future = session->join(realm).then([&](boost::future<uint64_t> joined) {
                    try {
                        std::cerr << "joined realm: " << joined.get() << std::endl;
                    } catch (const std::exception& e) {
                        std::cerr << e.what() << std::endl;
                        io.stop();
                        return;
                    }

                    autobahn::wamp_call_options call_options;
                    call_options.set_timeout(std::chrono::seconds(10));

                    std::tuple<uint32_t, uint64_t, uint64_t> arguments_add2(clientNumber, 333, 222);
                    boost::future<void> call_future_add2 = session->call("local:example.ExampleInterface:commonapi.examples.HelloWorld.add2", arguments_add2, call_options).then(
                    [&](boost::future<autobahn::wamp_call_result> result_future) {
                        try {
                        	autobahn::wamp_call_result result = result_future.get();
                        	std::cout << "number_of_arguments=" << result.number_of_arguments() << std::endl;
                            uint64_t sum = result.argument<uint64_t>(0);
                            uint64_t diff = result.argument<uint64_t>(1);
                            std::cerr << "call result: " << sum << " | " << diff << std::endl;
                        } catch (const std::exception& e) {
                            std::cerr << "call failed: " << e.what() << std::endl;
                            io.stop();
                            return;
                        }


                        ExampleInterface::Summands s = {777, 23};
                        std::tuple<uint32_t, Summands_internal> arguments_add2struct(clientNumber, s.values_);
                        boost::future<void> call_future_add2struct = session->call("local:example.ExampleInterface:commonapi.examples.HelloWorld.add2struct", arguments_add2struct, call_options).then(
                             [&](boost::future<autobahn::wamp_call_result> result) {
                             try {
                                 ExampleInterface::SumDiff sd;
                                 sd.values_ = result.get().argument<std::tuple<uint64_t, uint64_t>>(0);
                                 std::cerr << "call result: " << sd.getSum() << " | " << sd.getDiff() << std::endl;//
                             } catch (const std::exception& e) {
                                 std::cerr << "call failed: " << e.what() << std::endl;
                                 io.stop();
                                 return;
                             }


                             ExampleInterface::Params p = {{777, 23}, 98};
                             Params_internal p_internal = transformParams(p);
                             std::tuple<uint32_t, Params_internal> arguments_add2nestedStruct(clientNumber, p_internal);
                             boost::future<void> call_future_add2nestedStruct = session->call("local:example.ExampleInterface:commonapi.examples.HelloWorld.add2nestedStruct", arguments_add2nestedStruct, call_options).then(
                                  [&](boost::future<autobahn::wamp_call_result> result) {
                                  try {
                                      ExampleInterface::SumDiff sd;
                                      sd.values_ = result.get().argument<std::tuple<uint64_t, uint64_t>>(0);
                                      std::cerr << "call result: " << sd.getSum() << " | " << sd.getDiff() << std::endl;//
                                  } catch (const std::exception& e) {
                                      std::cerr << "call failed: " << e.what() << std::endl;
                                      io.stop();
                                      return;
                                  }


                        leave_future = session->leave().then([&](boost::future<std::string> reason) {
                            try {
                                std::cerr << "left session (" << reason.get() << ")" << std::endl;
                            } catch (const std::exception& e) {
                                std::cerr << "failed to leave session: " << e.what() << std::endl;
                                io.stop();
                                return;
                            }

                            stop_future = session->stop().then([&](boost::future<void> stopped) {
                                std::cerr << "stopped session" << std::endl;
                                io.stop();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        std::cerr << "starting io service" << std::endl;
        io.run();
        std::cerr << "stopped io service" << std::endl;

        transport->detach();
    }
    catch (const std::exception& e) {
        std::cerr << e.what() << std::endl;
        return 1;
    }

    return 0;
}
